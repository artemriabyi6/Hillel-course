1. Factory function (функція-фабрика) в JavaScript — це функція, яка створює і повертає об'єкти. 
   Вона може повертати нові об'єкти з різними властивостями та методами, на основі вхідних параметрів. 
   Використання фабричних функцій дозволяє уникнути використання операторів new і класів, роблячи код більш гнучким і зрозумілим.



2. Коли ви використовуєте addEventListener з функцією, як у вашому прикладі 
   addEventListener('click', function() { console.log(this); }), 
   контекст this буде посилатися на елемент, до якого прикріплено обробник події.



3. У JavaScript функція-конструктор — це функція, яка використовується для створення об'єктів певного типу. 
   Зазвичай функції-конструктори починаються з великої літери, щоб відрізняти їх від звичайних функцій. 
   Щоб створити новий екземпляр об'єкта за допомогою конструктора, використовується ключове слово new.



4. У JavaScript міксини дозволяють поєднувати функціонал різних об'єктів, додаючи методи та властивості з одного об'єкта в інший. 
   Це корисно, коли ви хочете уникнути складної ієрархії успадкування та повторного використання коду. 
   У JavaScript міксини зазвичай реалізуються шляхом копіювання властивостей з одного об'єкта до іншого 
   за допомогою методів Object.assign() або через прототипне наслідування.


    const sayHelloMixin = {
    sayHello() {
        console.log(`Hello, my name is ${this.name}`);
    }
    };

    const canEatMixin = {
    eat() {
        console.log(`${this.name} is eating.`);
        }
    };

    const canWalkMixin = {
        walk() {
        console.log(`${this.name} is walking.`);
        }
    };

    function Person(name) {
    this.name = name;
    }

    // Додаємо методи з міксинів до прототипу Person
    Object.assign(Person.prototype, sayHelloMixin, canEatMixin, canWalkMixin);

    const person1 = new Person("Alice");
    person1.sayHello(); // Виведе: "Hello, my name is Alice"
    person1.eat();      // Виведе: "Alice is eating."
    person1.walk();     // Виведе: "Alice is walking."



5. Mind map (ментальна карта) — це графічний спосіб організації інформації, який допомагає структурувати ідеї, 
   взаємозв'язки та концепції навколо центральної теми або поняття. 
   Зазвичай, mind map починається з центрального елемента в центрі (головна ідея або тема), 
   від якого розходяться підтеми та ключові ідеї у вигляді гілок. 
   Кожна гілка може далі розгалужуватись, утворюючи мережу взаємопов'язаних понять.



6. Функіональнe програмування, Об'єктно-орієнтоване програмування та різниця між ними



7. Синтаксичний цукор (англ. syntactic sugar) — це термін, що описує синтаксичні конструкції в мовах програмування, 
   які роблять код простішим і зручнішим для читання і написання, але не змінюють функціональності чи логіки програми. 
   Іншими словами, синтаксичний цукор — це альтернативні способи запису певного коду, які допомагають зробити його менш громіздким
   або зрозумілішим, але за своєю суттю вони виконують те ж саме, що і більш базові конструкції.



8. У JavaScript клас (class) — це синтаксична конструкція, яка дозволяє створювати об'єкти з використанням парадигми 
   об’єктно-орієнтованого програмування (ООП). Класи вперше з'явилися в JavaScript у стандарті ES6 (ES2015)
   і спрощують процес створення об'єктів, що містять методи та властивості.

   Клас можна розглядати як шаблон для створення об'єктів із схожими характеристиками та поведінкою.



9. Прототипи в JavaScript — це механізм, за допомогою якого об'єкти можуть наслідувати властивості й методи один від одного. 
   JavaScript є прототипно-орієнтованою мовою, а це означає, що кожен об'єкт має прихований зв'язок із іншим об'єктом, 
   який називається прототипом. Прототипи дозволяють ефективно використовувати спільні методи та властивості серед об'єктів.

   Як працюють прототипи:
   Коли в JavaScript викликається метод об'єкта, інтерпретатор шукає його спочатку у самому об'єкті. Якщо методу немає, 
   він шукає його в прототипі цього об'єкта, і так далі, аж до Object.prototype (кореневого прототипу),
   який є кінцевим у цьому ланцюжку.



10. Інструкція new в JavaScript використовується для створення нового об'єкта на основі функції-конструктора або класу. 
    Коли ви викликаєте функцію з new, вона працює як конструктор і створює новий об'єкт, 
    прив'язуючи до нього певні властивості й методи.

    Як працює інструкція new

    При використанні new відбувається кілька кроків:

    a) Створюється новий порожній об'єкт.
    b) Встановлюється прототип цього нового об'єкта, відповідний прототипу функції-конструктора або класу.
    c) Викликається функція-конструктор з параметрами, переданими в new, і в контексті this створеного об'єкта.
    d) Повернення об’єкта: якщо конструктор не повертає інший об’єкт, new повертає створений об'єкт автоматично.