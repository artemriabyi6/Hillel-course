
1. Утиліти — це функції або інструменти, які виконують конкретні, зазвичай прості, завдання, щоб спростити 
   або автоматизувати певні аспекти програмування або роботи з даними. Утиліти можуть бути частиною бібліотеки, 
   фреймворку або просто набору функцій, які допомагають розробникам виконувати повторювані завдання або операції.
   
   Основні характеристики утиліт:

   - Спеціалізація: Утиліти зазвичай виконують одну або кілька пов'язаних функцій, наприклад, маніпуляції з рядками, числами, 
     масивами, об'єктами тощо.

   - Повторне використання: Утиліти призначені для повторного використання в різних частинах програми або проекту,
     що сприяє зменшенню дублікації коду.

   - Зручність: Вони часто забезпечують зручний інтерфейс для виконання складних або повторюваних завдань, 
     зменшуючи обсяг коду, який потрібно писати.



2. Абстракція — це ключовий принцип об'єктно-орієнтованого програмування (ООП), який полягає у виділенні 
   суттєвих характеристик об'єкта,
   ігноруючи неважливі деталі. Це дозволяє зосередитися на важливих аспектах системи та спростити управління складними структурами.

   Основні аспекти абстракції:

   - Схематичність: Абстракція дозволяє створювати спрощені моделі реальних об'єктів або концепцій. 
     Вона допомагає розробникам зосередитися на тому, що важливо для конкретного контексту.

   - Приховування деталей: Абстракція дозволяє приховати реалізаційні деталі, щоб користувачі або інші компоненти системи 
     взаємодіяли лише з інтерфейсом. Це зменшує складність і полегшує використання.

   - Упрощення: Завдяки абстракції складні системи можуть бути розділені на менші, легші для розуміння компоненти.



3. Конфіг (або конфігурація) — це термін, що зазвичай використовується для позначення набору параметрів або налаштувань, 
   які визначають поведінку програми, системи або програмного забезпечення. Конфігурація може включати в себе різні аспекти, такі як:

  Основні аспекти конфігурації:

  - Параметри налаштування: Конфігурація може включати параметри, які налаштовують функціональність програми, такі як порти, 
    адреси серверів, шляхи до файлів, тощо.

  - Зовнішні файли: Конфігурації часто зберігаються у зовнішніх файлах, таких як файли YAML, JSON, XML або INI, 
    що дозволяє змінювати налаштування без потреби переписувати код програми.

  - Середовища виконання: Конфігурація може відрізнятися в залежності від середовища, в якому виконується програма
    (наприклад, розробка, тестування, продуктивне середовище).

  - Налаштування бібліотек і фреймворків: Багато бібліотек і фреймворків мають свої конфігураційні файли, в яких вказуються
    параметри для налаштування їх роботи.