1. __proto__ — це властивість об'єкта в JavaScript, яка містить посилання на його 
   прототип (тобто на об'єкт, з якого він успадковує властивості та методи). 
   Прототип — це прихований об'єкт, який стоїть "над" вашим об'єктом у так званому "ланцюжку прототипів" (prototype chain). 
   За допомогою __proto__ можна отримати доступ до цього ланцюжка та визначити, 
   які властивості та методи об'єкт успадковує від своїх прототипів. (Не рекомендується використовувати)!



2. prototype використовується для визначення спільних методів у функціях-конструкторах,
   тоді як __proto__ служить зв’язком між об’єктом і його прототипом.

  

3. Класи надають більш зручний, сучасний і структурований синтаксис для створення об'єктів, інкапсуляції та успадкування.

   Функції-конструктори є більш традиційним підходом до створення об'єктів, проте їх синтаксис менш інтуїтивний, 
   особливо для успадкування та додавання методів.

   У більшості сучасних проєктів рекомендується використовувати класи через їх зручність і читабельність.



4. Гетери (getters) та сетери (setters) в JavaScript — це спеціальні методи, які дозволяють зручно працювати з властивостями об'єкта. 
   Вони забезпечують контроль над доступом до значень властивостей, 
   дозволяючи виконувати додаткові дії при читанні або записі значень.

   Гетери дозволяють отримувати значення властивостей об'єкта. Вони визначаються за допомогою ключового слова get. 
   Коли ви звертаєтеся до властивості, визначеної як гетер, JavaScript автоматично викликає відповідний метод.

   Сетери дозволяють змінювати значення властивостей об'єкта. Вони визначаються за допомогою ключового слова set. 
   Коли ви присвоюєте значення властивості, визначеній як сетер, JavaScript викликає відповідний метод.

   Гетери і сетери в JavaScript надають потужний механізм для управління доступом до властивостей об'єкта. 
   Використовуючи їх, ви можете контролювати, як дані читаються і записуються, 
   забезпечуючи при цьому зручний і інтуїтивно зрозумілий інтерфейс для роботи з об'єктами.



5. Приватні та статичні методи в JavaScript — це особливості класів, які допомагають організувати код та керувати доступом
   до методів і властивостей. Давайте розглянемо, що таке приватні та статичні методи, як їх використовувати і які їхні переваги.

   Приватні методи — це методи, які можуть бути доступні лише всередині самого класу, де вони визначені. 
   Вони не можуть бути викликані ззовні класу або з екземпляра класу.
   У JavaScript приватні методи визначаються з використанням символу # перед ім'ям методу.

   Статичні методи належать самому класу, а не його екземплярам. Це означає, що їх можна викликати без створення об'єкта класу. 
   Статичні методи часто використовуються для утилітарних функцій, які не залежать від конкретних значень екземпляра.